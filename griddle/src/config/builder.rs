// Copyright 2018-2022 Cargill Incorporated
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use crate::config::error::GriddleConfigError;
use crate::config::{GriddleConfig, PartialGriddleConfig};

pub trait PartialGriddleConfigBuilder {
    fn build(self) -> Result<PartialGriddleConfig, GriddleConfigError>;
}

pub struct GriddleConfigBuilder {
    partial_configs: Vec<PartialGriddleConfig>,
}

impl GriddleConfigBuilder {
    pub fn new() -> Self {
        GriddleConfigBuilder {
            partial_configs: Vec::new(),
        }
    }

    /// Adds a `PartialGriddleConfig` to the `GriddleConfigBuilder` object
    ///
    /// # Arguments
    ///
    /// * `partial` - A `PartialGriddleConfig` object generated by a configuration module.
    ///
    pub fn with_partial_config(mut self, partial: PartialGriddleConfig) -> Self {
        self.partial_configs.push(partial);
        self
    }

    /// Build a `GriddleConfig` object by incorporating values from each `partial_config`
    pub fn build(self) -> Result<GriddleConfig, GriddleConfigError> {
        let signing_key = self
            .partial_configs
            .iter()
            .find_map(|p| p.signing_key().map(|v| (v, p.source())))
            .ok_or_else(|| GriddleConfigError::MissingValue("signing key".to_string()))?;

        let rest_api_endpoint = self
            .partial_configs
            .iter()
            .find_map(|p| p.rest_api_endpoint().map(|v| (v, p.source())))
            .ok_or_else(|| GriddleConfigError::MissingValue("rest api endpoint".to_string()))?;
        #[cfg(feature = "proxy")]
        let proxy_forward_url = self
            .partial_configs
            .iter()
            .find_map(|p| p.proxy_forward_url().map(|v| (v, p.source())))
            .ok_or_else(|| GriddleConfigError::MissingValue("proxy forward url".to_string()))?;

        let scope = self
            .partial_configs
            .iter()
            .find_map(|p| p.scope().map(|v| (v, p.source())))
            .ok_or_else(|| GriddleConfigError::MissingValue("scope".to_string()))?;

        let verbosity = self
            .partial_configs
            .iter()
            .find_map(|p| p.verbosity().map(|v| (v, p.source())))
            .ok_or_else(|| GriddleConfigError::MissingValue("verbosity".to_string()))?;

        Ok(GriddleConfig {
            signing_key,
            rest_api_endpoint,
            #[cfg(feature = "proxy")]
            proxy_forward_url,
            scope,
            verbosity,
        })
    }
}
